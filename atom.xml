<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mucixia.github.io</id>
    <title>在高处，凝望世界流动</title>
    <updated>2021-09-26T13:16:26.618Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mucixia.github.io"/>
    <link rel="self" href="https://mucixia.github.io/atom.xml"/>
    <subtitle>不必等候炬火，我便是惟一的光</subtitle>
    <logo>https://mucixia.github.io/images/avatar.png</logo>
    <icon>https://mucixia.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 在高处，凝望世界流动</rights>
    <entry>
        <title type="html"><![CDATA[C语言刷题记录]]></title>
        <id>https://mucixia.github.io/post/c-yu-yan-shua-ti-ji-lu/</id>
        <link href="https://mucixia.github.io/post/c-yu-yan-shua-ti-ji-lu/">
        </link>
        <updated>2021-09-15T02:16:39.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一">一、</h2>
<h3 id="1n的阶乘">1.n的阶乘</h3>
<pre><code>int i=0;
int n;
int sum=1;
printf(&quot;输入n的值：&quot;); 
scanf(&quot;%d&quot;,&amp;n); //获取n的值
for(i=1;i&lt;=n;i++)
{
   sum=i*sum;//实现阶乘
}
printf(&quot;%d\n&quot;,sum);
return 0;
</code></pre>
<h3 id="2n的阶乘之和">2.n的阶乘之和</h3>
<pre><code>//法一：嵌套循环
int i=0;
int j=0;
int sum_1=1;
int sum_2=0;
int n=10;
for(i=1;i&lt;=3;i++)
{
  sum_1=1;
  for(j=1;j&lt;=i;j++)
    {
    sum_1=j*sum_1;//阶乘 
    }
    sum_2=sum_1+sum_2;//阶乘之和 
}
printf(&quot;%d&quot;,sum_2);

return 0;
//法二：
int i=0;
int sum=1;
int sum_1=0;
for(i=1;i&lt;=3;i++)
{
  sum*=i;
  sum_1+=sum;	
}
printf(&quot;%d&quot;,sum_1);
return 0;	
</code></pre>
<h3 id="3冒泡排序">3.冒泡排序</h3>
<p>排分数：</p>
<pre><code>int i,j,t,n;
int a[100];
printf(&quot;输入需要排序的个数：&quot;);
scanf(&quot;%d&quot;,&amp;n);
for(i=1;i&lt;=n;i++)
{
    scanf(&quot;%d&quot;,&amp;a[i]);
}

for(i=1; i&lt;=n-1; i++)//n个数需要排n-1趟
{
   for(j=1; j&lt;=n-i; j++)//每一趟需要比较n-i次大小
   {
   	if(a[j]&lt;a[j+1])//交换位置，从小到大
   	{
   		t=a[j];
   		a[j]=a[j+1];
   		a[j+1]=t;	
   		}	
   }
}

for(i=1;i&lt;=n;i++)//打印排好序的数字
{
   printf(&quot;%d\n&quot;,a[i]);
}
 
   return 0;
</code></pre>
<p>根据分数打印人名：<br>
struct{</p>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C语言基础—输入输出、分支与循环]]></title>
        <id>https://mucixia.github.io/post/c-yu-yan-ji-chu-fen-zhi-yu-xun-huan/</id>
        <link href="https://mucixia.github.io/post/c-yu-yan-ji-chu-fen-zhi-yu-xun-huan/">
        </link>
        <updated>2021-09-13T14:54:10.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-输入输出">一、输入输出</h2>
<h3 id="1-scanf与printf">1. scanf与printf</h3>
<p>####（1）scanf<br>
scanf函数称为格式输入函数，即按用户指定的格式从键盘上把数据输入到指定的变量之中。scanf函数是一个标准库函数，它的函数原型在头文件“stdio.h”中。故在程序前面要先声明#include &lt;stdio.h&gt;.<br>
scanf的一般形式： scanf(“格式控制字符串”, 地址表列); 如<code>scanf(&quot;%d&quot;,&amp;a)；</code><br>
其中，<strong>格式化字符串</strong>：<br>
格式字符串的一般形式为：<br>
%[*][输入数据宽度][长度]类型<br>
各部分含义：<br>
①类型</p>
<table>
<thead>
<tr>
<th style="text-align:center">格式</th>
<th style="text-align:center">字符意义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">d</td>
<td style="text-align:center">输入十进制整数</td>
</tr>
<tr>
<td style="text-align:center">o</td>
<td style="text-align:center">输入八进制整数</td>
</tr>
<tr>
<td style="text-align:center">x</td>
<td style="text-align:center">输入十六进制整数</td>
</tr>
<tr>
<td style="text-align:center">u</td>
<td style="text-align:center">输入无符号十进制整数</td>
</tr>
<tr>
<td style="text-align:center">f或e</td>
<td style="text-align:center">输入实型数(用小数形式或指数形式)</td>
</tr>
<tr>
<td style="text-align:center">f或e</td>
<td style="text-align:center">输入实型数(用小数形式或指数形式)</td>
</tr>
<tr>
<td style="text-align:center">c</td>
<td style="text-align:center">输入单个字符</td>
</tr>
<tr>
<td style="text-align:center">s</td>
<td style="text-align:center">输入字符串</td>
</tr>
</tbody>
</table>
<p>②“*”符<br>
用以表示该输入项，读入后不赋予相应的变量，即跳过该输入值。如：<br>
<code>scanf(&quot;%d %*d %d&quot;,&amp;a,&amp;b);</code><br>
当输入为：1   2   3时，把1赋予a，2被跳过，3赋予b<br>
③ 数据宽度<br>
用十进制整数指定输入的宽度（即字符数）。例如：<br>
scanf(&quot;%5d&quot;,&amp;a);<br>
输入12345678只把12345赋予变量a，其余部分被截去。又如：<br>
scanf(&quot;%4d%4d&quot;,&amp;a,&amp;b);<br>
输入12345678将把1234赋予a，而把5678赋予b。<br>
④长度<br>
长度格式符为l和h，l表示输入长整型数据（如%ld）和双精度浮点数（如%lf）。h表示输入短整型数据。</p>
<p><strong>地址列表</strong>：<br>
&amp;是一个取地址运算符，&amp;a是一个表达式，其功能是求变量的地址。系统先为其变量a分配内存空间，这样变量a就有了内存地址,用&amp;取出a的地址,把输入的数根据所取出的地址，存入内存空间。<br>
scanf实现原理：<br>
用户输入 -&gt; 输入缓冲区 -&gt;scanf<br>
scanf只要输入缓存区有内容,就不会要求用户输入数据。<br>
由于scanf函数本身不能显示提示串，故先用printf语句在屏幕上输出提示，如：<br>
<code>printf(&quot;input a,b,c:&quot;);</code><br>
<code>scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c);</code></p>
<h4 id="2-printf">(2) printf</h4>
<p>功能是将程序运行的结果输出到屏幕上.<br>
一般格式：<br>
①printf(&quot;字符串\n&quot;);<br>
②printf(&quot;字符串\n&quot;);<br>
③printf(&quot;输出控制符1 输出控制符2…&quot;, 输出参数1, 输出参数2, …); 如:<br>
<code>printf(&quot;%d %d</code>\n<code>&quot;, i, j);</code>//%d就是输出控制符。<br>
输出控制符：计算机中所有的数据都是二进制 0、1 代码，所以输出的时候要用“输出控制符”告诉计算机以什么形式将二进制数据显示出来。</p>
<h3 id="2-getchar与putchar">2. getchar与putchar</h3>
<h4 id="1getchar">（1）getchar</h4>
<p>从标准输入流只读取一个字符(包括空格、回车、tab)，读到回车符('\n')时退出，键盘输入的字符都存到缓冲区内,一旦键入回车,getchar就进入缓冲区读取字符,一次只返回第一个字符作为getchar函数的值,如果有循环或足够多的getchar语句,就会依次读出缓冲区内的所有字符直到'\n'.<br>
如：while((ch=getchar())!='0')<br>
//		       putchar(ch);<br>
####（2）putchar<br>
函数putchar()用于将给定的字符输出到控制台，其原型如下：<br>
int putchar (int ch);</p>
<h2 id="二-控制结构">二、控制结构</h2>
<h3 id="1分支语句">1.分支语句</h3>
<h4 id="11-分支分类">1.1 分支分类</h4>
<ul>
<li>if</li>
<li>if-else</li>
<li>if-else if-else</li>
<li>switch(多分支适用)<br>
<strong>注意：</strong><br>
if-else 就近原则配对</li>
</ul>
<h3 id="2循环语句">2.循环语句</h3>
<ul>
<li>while</li>
<li>for</li>
<li>do  while</li>
</ul>
<p><strong>注意</strong>：<br>
①不可以在for循环体内修改循环变量，防止for循环失去控制（死循环）。<br>
②建议循环控制变量的取值采用“前闭后开”写法。<code>for(i=0; i &lt;10; i++)</code><br>
③for循环的初始化、调整、判断都可以被省略，但是如果判断部分省略掉，判断条件就恒为真，陷入死循环。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[某些词]]></title>
        <id>https://mucixia.github.io/post/mou-xie-ci/</id>
        <link href="https://mucixia.github.io/post/mou-xie-ci/">
        </link>
        <updated>2021-08-30T09:44:30.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h3 id="毛不易">毛不易</h3>
<h4 id="给你给我">《给你给我》</h4>
<p>给你我平平淡淡的等待和守候<br>
给你我轰轰烈烈的渴望和温柔<br>
给你我百转千回的喜乐和哀愁<br>
给你我微不足道 所有的所有</p>
<p>给我你带着微笑的嘴角和眼眸<br>
给我你灿烂无比的初春和深秋<br>
给我你未经雕琢的天真和自由<br>
给我你最最珍贵 所有的所有</p>
<p>给你我义无反顾的长长和久久<br>
给我你多年以后仍握紧的手<br>
给你成熟 你给我迁就<br>
会不会就这样白了头<br>
给你我义无反顾的长长和久久<br>
给我你多年以后仍握紧的手<br>
给你成熟 你给我迁就<br>
会不会就这样白了头</p>
<p>给我你带着微笑的嘴角和眼眸<br>
给你我轰轰烈烈的渴望和温柔<br>
给我你未经雕琢的天真和自由<br>
给你我微不足道 所有的所有<br>
给你我微不足道 所有的所有</p>
<h4 id="一程山路">《一程山路》</h4>
<p>青石板留着谁的梦啊<br>
一场秋雨 又落一地花<br>
旅人匆匆的赶路啊<br>
走四季 访人家<br>
如同昨夜天光乍破了远山的轮廓<br>
想起很久之前我们都忘了说<br>
一夜曲折过后 又一道坎坷<br>
走不出 看不破</p>
<p>山谷的薄雾吻着烟霞<br>
枯叶之下 藏多少情话<br>
划破天空的归鸟啊<br>
它不问 你不答<br>
如同昨夜天光乍破了远山的轮廓<br>
想起很久之前我们都忘了说<br>
一夜曲折过后 又一道坎坷<br>
走不出 看不破<br>
潺潺流水终于穿过了群山一座座<br>
好像多年之后你依然执着<br>
白云是否也听过你的诉说<br>
笑着你 笑着我<br>
白云是否也听了你的诉说<br>
笑着你 笑着我<br>
<img src="https://i.loli.net/2021/08/30/QgXkUdKFMi1bLIr.jpg" alt="pexels-milada-vigerova-5984665.jpg" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C语言重难点-数据在内存中的存储、内存函数、动态内存分配]]></title>
        <id>https://mucixia.github.io/post/c-yu-yan-chong-nan-dian-shu-ju-zai-nei-cun-zhong-de-cun-chu-nei-cun-han-shu-dong-tai-nei-cun-fen-pei/</id>
        <link href="https://mucixia.github.io/post/c-yu-yan-chong-nan-dian-shu-ju-zai-nei-cun-zhong-de-cun-chu-nei-cun-han-shu-dong-tai-nei-cun-fen-pei/">
        </link>
        <updated>2021-08-27T09:11:28.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-数据存储">一、数据存储</h2>
<h3 id="1-数据类型">1. 数据类型</h3>
<p>类型的意义：</p>
<ul>
<li>使用这个类型开辟内存空间（大小决定了适用范围）</li>
<li>决定了如何看待内存空间的视角</li>
</ul>
<h4 id="11-内置类型">1.1 内置类型</h4>
<h5 id="1整形家族">（1）整形家族</h5>
<ol>
<li>char<br>
有符号数，范围是[-128，127]</li>
<li>short</li>
<li>int</li>
<li>long</li>
</ol>
<h5 id="2浮点型家族">（2）浮点型家族</h5>
<ol>
<li>float：4字节</li>
<li>double：8字节</li>
</ol>
<h5 id="3指针类型">（3）指针类型</h5>
<p>*p</p>
<h5 id="4空类型">（4）空类型</h5>
<p>void表示空类型，通常用于函数的返回类型、函数的参数、指针类型</p>
<h4 id="12-自定义类型构造类型">1.2 自定义类型（构造类型）</h4>
<ol>
<li>数组类型</li>
<li>结构体类型 struct</li>
<li>枚举类型 enum</li>
<li>联合类型 union</li>
</ol>
<p>此处见<strong>二、自定义数据类型</strong></p>
<h3 id="2整形在内存中的存储">2.整形在内存中的存储</h3>
<p><img src="https://i.loli.net/2021/08/28/WIgtPfKC3QB47yN.png" alt="QQ截图20210828135840.png" loading="lazy"><br>
<strong>（1）原码反码补码</strong><br>
计算机中的有符号数有三种表示方法，即原码、反码和补码。对于整形，数据存放内存中存放的是补码<br>
8位二进制, 使用原码或反码表示的范围为[-127, +127], 即2^7-1，而有符号数使用补码表示的范围为[-128, 127]，-128就是10000000，无符号数范围是[0，255]；因为机器使用补码, 所以对于编程中常用到的32位int类型, 可以表示范围是: [-2^31, 2^31-1] 因为第一位表示的是符号位.而使用补码表示时又可以多保存一个最小值。<br>
原码：<br>
直接将二进制数按照正负数形式翻译成二进制就可以；<br>
反码：<br>
正数的反码是其本身<br>
将原码的符号位不变，其它依次按位取反；<br>
补码：<br>
正数的反码是其本身<br>
反码+1就是补码。<br>
<strong>栗子</strong>：<br>
[+1] = [00000001]原 = [00000001]反 = [00000001]补<br>
[-1] = [10000001]原 = [11111110]反 = [11111111]补<br>
<a href="https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/computercode.html">正码、反码和补码详解</a><br>
真值： 现实世界中的数字<br>
原码：在真值的基础上解决了正负号在机器中的表示问题<br>
补码：在原码的基础上解决了如何将减法变成加法的问题<br>
移码：在补码的基础上解决了数字的直观大小比较问题<br>
<strong>（2）大小端</strong><br>
大端模式（大端字节序存储模式）：数据的低位保存在内存的高地址中，而数据的高位保存在内存的低地址中<br>
小端模式（小端字节序存储模式）：数据的低位保存在内存的低地址中，而数据的高位保存在内存的高地址中<br>
<img src="https://i.loli.net/2021/08/28/N7m3TYJoFLtU1IA.jpg" alt="BE38E4E0B3D9775936C15F0CC81DBAD4.png" loading="lazy"><br>
<strong>栗子</strong>：<br>
判断当前机器的字节序：<br>
//思路：将存储的地址存放在一个字符指针变量中，判断首元素和待比较的低位相等。<br>
<img src="https://i.loli.net/2021/08/28/fAIHLYXEO1R5auF.png" alt="QQ截图20210828203335.png" loading="lazy"><br>
将其封装成一个函数：<br>
<img src="https://i.loli.net/2021/08/28/XVS4ZTqGcWOw7Le.png" alt="QQ截图20210828204128.png" loading="lazy"><br>
指针部分可以简化成：return <code>*</code>(char<code>*</code> )&amp;a;<br>
<strong>（3）整型提升</strong><br>
表达式中的字符和短整型操作数在使用之前被转换为普通整型，这种转换称为整型提升。<br>
表达式中各种长度可能小于int长度的整型值，都必须先转换为int或unsigned int，然后才能送入CPU去执行运算。</p>
<ol>
<li>负数的整型提升<br>
char c1 = -1; 变量c1的二进制位(补码)中只有8个比特位： 1111111 因为 char 为有符号的 char 所以整形提升的时候，高位补充符号位即1， 提升之后的结果是： 11111111111111111111111111111111</li>
<li>正数的整型提升<br>
char c2 = 1; 变量c2的二进制位(补码)中只有8个比特位： 00000001 因为 char 为有符号的 char 所以整形提升的时候，高位补充符号位即0， 提升之后的结果是： 00000000000000000000000000000001</li>
<li>无符号整形提升，高位补0</li>
</ol>
<p><strong>（4）举个栗子</strong><br>
题一：<br>
<img src="https://i.loli.net/2021/08/28/EK6zyBjOX4cvRUL.png" alt="QQ截图20210828212735.png" loading="lazy"><br>
（即使两个char类型8位的相加，在CPU执行时实际上也要先转换为CPU内整型32位操作数的标准长度。）<br>
题二：<br>
<img src="https://i.loli.net/2021/08/28/98mxUlFNRMc5JYi.jpg" alt="7C64E6DB1FAC6F72BDB1F1B14FFD968F.png" loading="lazy"><br>
计算方法：因为整形存储的是补码，所以先计算出32位补码，后取8位char类型，遇到整型提升（%d），补充0/1至32位（此时还是补码），提升后输出将此时的补码转化成原码再转化成十进制即可。<br>
原码——&gt;补码（取后八位...）——&gt;整型提升成补码——&gt;原码输出</p>
<ul>
<li>负数：补充1</li>
<li>正数：补充0</li>
<li>无符号unsigned：补充0</li>
</ul>
<p>题三：<br>
<img src="https://i.loli.net/2021/08/28/IBe2CikobKQ6c4p.jpg" alt="6109DDA675C45092A09D41CBEA9FD77C.png" loading="lazy"><br>
题四：<br>
<img src="https://i.loli.net/2021/08/29/x5c6eHqlNoXKuwE.jpg" alt="2ADC57E4EC301B5F65AF210D7DB55F79.png" loading="lazy"><br>
//这里的数是int类型，在计算时不需要取后8位整型提升；%d是输出有符号数，将相加后的补码，按照符号位不变的原则，算出对应原码即可。<br>
题五：<br>
<img src="https://i.loli.net/2021/08/29/DTINhKWRZLuH3zm.jpg" alt="3DD1B1C6EE26EEA76F9E8438F15DE4EE.png" loading="lazy"><br>
//因为i是无符号数始终&gt;=0，此循环执行结果为：9，8，7，6，5，4，3，2，1，死循环。<br>
无符号数取值范围：[0,255]；有符号数（char）取值范围：[-128,127]<br>
题六：<br>
<img src="https://i.loli.net/2021/08/29/FW4HoQqbfKRdJAy.jpg" alt="DC47C3747CA542BFFC321BE90331A327.png" loading="lazy"><br>
//此题注意有符号类型（char）的范围和钟表法</p>
<h3 id="2浮点型在内存中的存储">2.浮点型在内存中的存储</h3>
<h4 id="11-浮点数的表示方法">1.1 浮点数的表示方法</h4>
<p>（1）表示方式：<br>
<img src="https://i.loli.net/2021/08/30/afZqKXVelsS2DbG.jpg" alt="DB5F908746358D080CDCB5919E7536F8.png" loading="lazy"><br>
<img src="https://i.loli.net/2021/08/30/JcdbrLwDkFy798S.jpg" alt="4C75E1C3074B7AB399DB737028B1B803.png" loading="lazy"><br>
S：符号位<br>
M：1&lt;=M&lt;2，M可以写成1.~~~~~~形式，在计算机保存Mde时候，默认第一位总为1，故存储时只存小数点后的数，小数部分补齐0至32/64位，读取时再加上第一位的1。好处就是可以多存一位有效数字。<br>
E：是无符号整数，若E为8位，它的范围是[0，255]；若E为11位，它的范围是[0,2047]。<br>
因为科学计数法中E可能是负数，如十进制小数0.5它转换成二进制为0.1，写成科学计数法为（-1）<sup>0`*`1.0`*`2</sup>(-1),所以IEEE 754规定，保存E时加上中间值，对于8位，加上127；对于11位，加上1023,这样保证了存入的E为正。<br>
<strong>补充</strong>：<a href="https://www.runoob.com/w3cnote/decimal-decimals-are-converted-to-binary-fractions.html">关于二进制与十进制的转换</a></p>
<p>其中，E从内存中取出有以下三种情况：<br>
<strong>①E不全为1或不全为0</strong><br>
<strong>举个栗子</strong>：0.5<br>
（-1）<sup>0`*`1.0`*`2</sup>(-1)：s=0,M=1.0,E=-1，E存入的位-1+127=126；对于32位来说，存储如下：<br>
<img src="https://i.loli.net/2021/08/30/Q3brKCNBjlRhSnc.jpg" alt="761D650449F22415EC53E8088996BF52.png" loading="lazy"><br>
<strong>②E全为0</strong><br>
当E为0时，那么真实值为-127，那么V趋于0.<br>
所以直接规定，当指数E存储值为0时，它的真实值为1-127，有效数字M不再加上1，直接写成+-0.几几几。<br>
这样的好处就是可以表示+-0，以及接近于0的很小的数字。如：<br>
0/1 00000000 01100000000000000000000——&gt;+/- 0.011<code>*</code>2^(-126)<br>
<strong>③E为全1</strong><br>
当E=11111111即255时，E的真实值为128，表示的数是正负无穷大的数字。</p>
<p><strong>举个栗子</strong>：<br>
<img src="https://i.loli.net/2021/08/30/fuSxmWo6vYGAKha.jpg" alt="82529130843C2668D6C6237984AB6455.png" loading="lazy"><br>
//n=9是整形，存入的形式是：符号位（1）+数值（31位）<br>
即00000000 00000000 00000000 00001001<br>
若要以%f输出，则将00000000 00000000 00000000 00001001看成是0 00000000 0000000 0000000000001001即S（1位）+E（8位）+M（23位）表示的数就是（-1）^0<code>*</code>0000000 0000000000001001<code>*</code>2^(-126) ，趋于0 。<br>
9.0是float类型，二进制为1001.0，E存储值为127+3=130，存放形式是0 10000010 00000000000000000000000<br>
若以整形形式输出，将其看成0（符号位） 1000001000000000000000000000000即可。</p>
<h2 id="二-自定义数据类型">二、自定义数据类型</h2>
<h3 id="1结构体">1.结构体</h3>
<h4 id="11-结构体类型的声明">1.1 结构体类型的声明</h4>
<p>结构是一些值的集合，这些值成为成员变量。结构体的每个成员可以是不同类型。<br>
（1）结构的声明<br>
声明格式：<br>
<code>struct tag</code><br>
<code>{</code><br>
<code>member-list;</code><br>
<code>}variable-liast;</code><br>
//tag 是结构体标签。<br>
member-list 是标准的变量定义，比如 int i; 或者 float f，或者其他有效的变量定义。<br>
variable-list 结构变量，定义在结构的末尾，最后一个分号之前，您可以指定一个或多个结构变量。<br>
在声明结构体时，tag、member-list、variable-list 这 3 部分至少要出现 2个：<br>
①声明了结构变量，未声明结构体标签——又叫匿名结构体类型，必须要声明结构变量。<br>
struct<br>
{<br>
int a;<br>
char b;<br>
double c;<br>
} s1;<br>
②未声明结构变量，声明了结构体标签<br>
struct  Su<br>
{<br>
int a;<br>
char b;<br>
double c;<br>
} ;<br>
③声明了结构变量，也声明了结构体标签<br>
struct  Su<br>
{<br>
int a;<br>
char b;<br>
double c;<br>
} s1;</p>
<h4 id="12-结构体的自引用">1.2 结构体的自引用</h4>
<p><code>struct Node</code><br>
<code>{</code><br>
<code>int data;</code><br>
<code>struct Node* next;</code><br>
<code>};</code><br>
可以使用 typedef 来为用户自定义的数据类型取一个新的名字。<br>
typedef struct  Node// 重命名时不建议省略结构体标签，若省略，则Node<em>无声明。<br>
{<br>
int data;<br>
struct Node</em> next;<br>
} Node;</p>
<h4 id="13-结构体变量的定义和初始化">1.3 结构体变量的定义和初始化</h4>
<p>（1）定义<br>
struct  Su<br>
{<br>
int a;<br>
char b;<br>
double c;<br>
} s1;//定义方式1：声明类型变量的同时定义变量s1</p>
<p>struct Su s2；//定义方式2：定义结构体变量s2<br>
(2)初始化<br>
<img src="https://i.loli.net/2021/08/30/tovH6r7RXNJpg42.jpg" alt="B07C7899C692B7AF57FCF5B4E8FA28E8.png" loading="lazy"><br>
s.c='c',s.a=100赋值也可以。<br>
在结构体里包含结构体：<br>
<img src="https://i.loli.net/2021/08/30/5KAqylOn1Y4R3Dr.jpg" alt="60F6D115F77FE2FC33E7E92499DACA74.png" loading="lazy"><br>
访问weight，用s.st.weight即可。</p>
<h4 id="14-结构体内存对齐">1.4 结构体内存对齐</h4>
<p>（1）对齐原因</p>
<ol>
<li>平台原因（移植原因）<br>
并非所有平台能任意访问任意地址的任意数据，某些硬件只能在某些地址处取某些特定类型的数据。</li>
<li>性能原因<br>
数据结构（尤其是栈）应该尽可能在自然边界对齐，因为若是未对齐的地址，处理器需要两次内存访问，而对齐的地址只需要访问一次。</li>
</ol>
<p>（2）对齐规则</p>
<ol>
<li>第一个成员在与结构体变量偏移量为0的地址处。</li>
<li>其他成员变量要对齐到对齐数的整数倍的地址处。这里的地址是相对于初始地址0而言，也就是偏移量。<br>
<strong>对齐数</strong>=编译器默认的一个对齐数 与 该成员大小（最基本的数据类型的大小）的<strong>较小值</strong>。<br>
char arr[5]//对齐数为1</li>
<li>结构体总大小为最大对齐数（每个成员变量都有一个对齐数）的整数倍。（不够就补齐空间）</li>
<li>如果嵌套了结构体，嵌套的结构体对齐自己的最大对齐数的整数倍的地址处，结构体的整体大小就是所有最大对齐数（含嵌套结构体的对齐数）的整数倍。</li>
</ol>
<p>对规则的解释：<br>
题1：<br>
<img src="https://i.loli.net/2021/08/30/oDV7ZRF4mUr3Mub.jpg" alt="D8D9948FB59517172B696DF8B63C6880.png" loading="lazy"><br>
注：其中vs默认对齐数是8，gcc编辑器没有默认的对齐数，对齐数就是成员大小。<br>
题2：<br>
<img src="https://i.loli.net/2021/08/30/u5mIxQ1MqiNZnSk.jpg" alt="4B61482FEC7A224784E1004E6AAFD3F0.png" loading="lazy"><br>
//由上可知，尽量让占用小的成员集中在一起。<br>
题3：（结构体嵌套）<br>
<img src="https://i.loli.net/2021/08/31/wAGc2RgeqLTUSJB.jpg" alt="80EA282B542F5123D1E408F9D9DDA294.png" loading="lazy"><br>
计算步骤：<br>
<img src="https://i.loli.net/2021/08/31/nK5QXuG6NUrAO8h.jpg" alt="00983222DFAA75011BC446737379D2EF.png" loading="lazy"><br>
（3）修改默认对齐数<br>
<code>#</code>pragma pack(6)//设置默认对齐数为4，一般设置成2，4，8，16这样的数<br>
<code>#</code>pragma pack（ )//取消设置的默认对齐数<br>
<strong>补充</strong>：</p>
<blockquote>
<p>引入头文件：#include &lt;stddef.h&gt;</p>
</blockquote>
<p>offsetof()函数用来计算偏移量。<br>
<img src="https://i.loli.net/2021/08/31/akLroWnmuUMSV5H.jpg" alt="B89571F43B1F5BA199762918FCF5C4E2.png" loading="lazy"><br>
具体的之后更新。<br>
........</p>
<h4 id="15-结构体传参">1.5 结构体传参</h4>
<p><img src="https://i.loli.net/2021/08/31/xaWJLK43O69CyNR.jpg" alt="8BB118AB6239A7BA790A551022BD6E4D.png" loading="lazy"><br>
结构体传参的时候，要传结构体的地址</p>
<h4 id="16-位段">1.6 位段</h4>
<p>(1) 位段的声明：</p>
<ol>
<li>位段的成员必须是int，unsigned int，signed int。</li>
<li>位段的成员名后有一个冒号和一个数字，数字代表着二进制位。</li>
</ol>
<p><code>struct S</code><br>
<code>{</code><br>
<code>int a : 2;</code><br>
<code>int b : 5;</code><br>
<code>int c : 10;</code><br>
<code>int d : 30;</code><br>
<code>};</code><br>
//struct S s;<br>
//sizeof(s)=8字节<br>
(2)内存分配规则</p>
<ol>
<li>位段成员可以是 int，unsigned int，signed int或是 char（整形家族）；</li>
<li>位段的空间上是按照需要以4个字节（int）或者是1个字节（char）的方式来开辟的；</li>
<li>位段：不跨平台，注重可移植的程序应该避免使用位段。<br>
<img src="https://i.loli.net/2021/08/31/w36gEK4teINaVdo.jpg" alt="C9298323C5D8456D1BE39C24B83E8F1E.png" loading="lazy"><br>
（3）应用<br>
数据传输时的数据包</li>
</ol>
<h3 id="2枚举">2.枚举</h3>
<h4 id="12-枚举类型的定义">1.2 枚举类型的定义</h4>
<p><code>enum Sex</code><br>
<code>{</code><br>
//枚举的可能取值-常量<br>
male，//male默认的值为0<br>
female，//默认值为1<br>
secret//默认为2，依次加1<br>
<code>};</code><br>
除了默认值赋值外，也可以自己赋给常量一个初始值。</p>
<h4 id="13-枚举的优点">1.3 枚举的优点</h4>
<p>（1）增加代码的可读性和可维护性<br>
（2）与#define比较，枚举有类型检查，更严谨<br>
（3）防止了命名污染（封装）<br>
（4）便于调试，一次可以定义多个常量</p>
<h3 id="3联合共用体">3.联合(共用体)</h3>
<h4 id="11-定义">1.1 定义</h4>
<p>联合是一种特殊的自定义类型，定义的变量包含了一系列成员，特征是这些成员共用同一块空间。<br>
<code>union Un</code><br>
<code>{</code><br>
char c;<br>
int  i;<br>
<code>};</code><br>
union Un u;<br>
sizeof(u)//4，大小至少是<strong>最大成员的大小</strong>;（满足4是最大对齐数4的整数倍）<br>
//&amp;u,&amp;u.c,&amp;u.i三者的地址一样，共用同一块空间<br>
<strong>补充：用联合体判断大小端：</strong><br>
<img src="https://i.loli.net/2021/08/31/rxAEmfM8Pzq4iVc.jpg" alt="CF0BAF6AF6DF92243AE60462A62C2E02.png" loading="lazy"></p>
<h4 id="12-联合大小的计算">1.2 联合大小的计算</h4>
<ol>
<li>联合的大小至少是最大成员的大小</li>
<li>当最大成员的大小不是最大对齐数的整数倍的时候，就要对齐到最大对齐数的整数倍。<br>
<img src="https://i.loli.net/2021/08/31/BdFhU7yCEKN9bDV.jpg" alt="99B0A1748DAEC8A3D7C9BAA4AC709508.png" loading="lazy"></li>
</ol>
<h2 id="三-动态内存分配">三、动态内存分配</h2>
<h3 id="1-基本介绍">1. 基本介绍</h3>
<p>（1）内存的使用方式</p>
<ol>
<li>创建一个变量<br>
栈区：存放局部变量、函数的形式参数<br>
堆区：动态内存分配<br>
静态区：存放全局变量、静态变量</li>
<li>创建一个数组</li>
</ol>
<h3 id="2基本函数">2.基本函数</h3>
<h4 id="11-malloc">1.1 malloc</h4>
<h4 id="12">1.2</h4>
<h3 id="13常见的动态内存错误">1.3.常见的动态内存错误</h3>
<h3 id="14举个栗子">1.4.举个栗子</h3>
<h3 id="15柔性数组">1.5.柔性数组</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C语言重难点-关于数组、结构体、递归、指针]]></title>
        <id>https://mucixia.github.io/post/c-yu-yan-guan-yu-shu-zu-jie-gou-zhi-zhen/</id>
        <link href="https://mucixia.github.io/post/c-yu-yan-guan-yu-shu-zu-jie-gou-zhi-zhen/">
        </link>
        <updated>2021-08-18T05:04:25.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-数组">一、数组</h2>
<h3 id="1-定义">1. 定义</h3>
<p>数组是一组<strong>相同类型</strong>元素的集合，它在内存中是<strong>连续存放</strong>的。<strong>创建方式</strong>为：<br>
<code>type_t arr_name [const_n]</code> ,如：</p>
<blockquote>
<p>int arr[5]<br>
char arr[3]<br>
double arr[10]</p>
</blockquote>
<h3 id="2初始化">2.初始化：</h3>
<ul>
<li>不完全初始化：<code>int arr[5]={1,2,3}</code> 剩下的元素默认为0；</li>
<li>未指定数组长度：<code>int arr[]={1,2,3,4}</code></li>
<li>字符串形式初始化：<code>char arr[]='abcd'</code></li>
</ul>
<p>补充：sizeof和strlen<br>
sizeof：“sizeof()”运算符求的是<strong>字符数组</strong>的长度，而<strong>不是字符串长度</strong>。只跟你给该字符串数组定义了多大空间有关，而跟字符串是否结束无关.如果遇到字符串，编译时会自动在末尾<strong>增加一个 null 字符</strong>，即char arr1[]='abc\0'。<br>
strlen：用来计算以’\0’结尾的<strong>字符串</strong>长度的函数。它并不是计算内存大小，仅计算字符串从开端到’\0’结尾字符的个数(不包含’\0’)。<br>
<code>char arr1[]='abc';//字符串</code><br>
<code>char arr2[]={'a','b','c'}//字符数组</code><br>
sizeof(arr1)=4//4<em>1=4， char arr[]={'a','b','c','\0'}<br>
sizeof(arr2)=3//3</em>1=3<br>
strlen(arr1)=3<br>
strlen(arr2)=随机数<br>
其中，arr1[]是字符串,arr2[]是字符数组<br>
总结：以字符串形式出现的，编译器都会为该字符串自动添加一个0作为结束符，如在代码中写 &quot;abc&quot;,那么编译器帮你存储的是&quot;abc/0&quot;，<strong>char arr[]=&quot;abc&quot;实际上存储的是 char arr[]={'a','b','c','\0'}</strong></p>
<h3 id="3二维数组">3.二维数组</h3>
<h4 id="31-创建方式">3.1 创建方式</h4>
<p>数据类型 数组名称[行][列]，如：int arr[3][2]代表三行两列的数组</p>
<h4 id="32-初始化">3.2 初始化</h4>
<ul>
<li>不完全初始化：<code>int arr[3][2]={1,2,3}</code> 剩下的元素默认为0；<br>
1 2<br>
3 0<br>
0 0</li>
<li>指定行列：<code>int arr[3][4]=={{1,2,3},{4,5}}</code><br>
1 2 3 0<br>
4 5 0 0<br>
0 0 0 0</li>
</ul>
<h4 id="33-使用">3.3 使用</h4>
<p>访问元素：<br>
<code>for(int i=0;i&lt;3;i++){</code><br>
 <code>for(int j=0;j&lt;4;j++){</code><br>
       <code>print(&quot;%d&quot;,arr[i][j]);</code><br>
<code>}</code><br>
     <code>print(&quot;\n&quot;)</code><br>
<code>}</code><br>
数组作为函数参数:<br>
<code>void bubble_sort(int arr[],int sz){</code><br>
<code>{</code><br>
<code>...</code><br>
<code>}</code><br>
<code>int main(){</code><br>
<code>int arr[]={1,2,3,4,5};</code><br>
<code>bubble_sort(arr,sz);//我们对arr进行传参，实际上传递过去的是数组的首元素的地址即&amp;arr[0];</code><br>
<code>int sz=sizeof(arr)/sizeof(arr[0]);</code><br>
<code>...</code><br>
<code>return 0;</code><br>
<code>}</code></p>
<p><strong>补充1：关于sizeof（arr）/sizeof(arr[0])</strong><br>
sizeof(arr)计算的是数组arr所占的总字节数，即空间大小；<br>
sizeof(arr[0])是单个元素的大小；<br>
sizeof（arr）/sizeof(arr[0])就是数组的长度；<br>
如：<code>int arr[]={1,2,3,4,5}</code><br>
数组长度：sizeof（arr）/sizeof(arr[0])<br>
其中，整数 int占4个字节，总字节数/4就是数组长度；<br>
<code>char arr[]={'a','b','c'}</code><br>
数组长度：sizeof（arr）/sizeof(arr[0])<br>
其字母占1个字节，故可简写成：sizeof（arr）。</p>
<p><strong>补充2：&amp;数组名、&amp;数组名【】</strong><br>
&amp;数组名：取出的是整个数组的地址（打印出首元素地址作为整个地址地代表）-&gt;p=&amp;arr,*p=arr(p是整个数组的地址，*p是数组首元素的地址)<br>
&amp;数组名[0]：取出的是数组的首元素地址<br>
数组名：取出的是数组的首元素地址<br>
<strong>☀️☀️注意</strong>：<br>
①数组名arr是首元素地址，但是以下两种   情况除外：</p>
<ul>
<li>sizeof(arr) 数组名表示整个数组，求得数组的大小，单位是字节。sizeof（arr）/sizeof(arr[0])；arr表示整个数组，sizeof（arr）表示整个数组的大小。</li>
<li>&amp;arr表示整个数组的地址。<br>
②int arr[10]={0}<br>
<img src="https://i.loli.net/2021/08/20/oFwKAieGCYODWfa.jpg" alt="12D433BF257416152394CC30207FA22C.png" loading="lazy"></li>
</ul>
<h2 id="二-指针">二、指针</h2>
<h3 id="11-定义">1.1 定义</h3>
<p>指针是编程语言中的一个对象，<strong>利用地址</strong>，它的值<strong>直接指向</strong>存在电脑存储器中的<strong>另一个地方的值</strong>，地址指向变量单元，存放地址的变量就是指针变量，换句话说，<strong>指针就是一个变量，里面存放着地址，指针就是地址。</strong><br>
如：<br>
<code>int a=10</code><br>
<code>int *p=&amp;a</code>//p是一个指针变量<br>
<code>prunt(*p)</code>// <code>*</code>是解引用，取指针p指向的地址里的内容，*p=10<br>
指针的大小在32位平台是四个字节，在64位平台是八个字节。</p>
<h3 id="12-指针和指针类型">1.2 指针和指针类型</h3>
<h4 id="1指针类型的意义">（1）指针类型的意义</h4>
<p>①指针类型决定了指针进行解引用操作的时候，能够访问空间的大小。</p>
<ul>
<li>int*p： *p能够访问4个字节</li>
<li>char <code>*</code>p：*p能够访问1个字节</li>
<li>double<code>*</code> p：*p能够访问8个字节</li>
<li>②指针类型决定了指针走一步走多远（指针的步长）</li>
<li>int*p： p+1--&gt;往后4字节</li>
<li>char *p：p+1--&gt;往后1字节</li>
<li>double* p：p+1--&gt;往后8字节</li>
</ul>
<h4 id="2野指针">（2）野指针</h4>
<p>指针执行的位置是不可知的<br>
导致野指针的原因：</p>
<ul>
<li>未初始化，局部变量不初始化，默认是随机值</li>
<li>指针越界访问</li>
<li>指针指向的空间释放</li>
</ul>
<p>怎么避免野指针：</p>
<ul>
<li>指针初始化</li>
<li>小心指针越界</li>
<li>指针指向空间释放的话，使之置为NULL</li>
<li>指针使用之前检查有效性</li>
</ul>
<p><strong>补充</strong>：<br>
① i++与++i<br>
区别一：i++是右值，++i是左值，左值是可以放到赋值符号左边的变量，即具有对应的可以由用户访问的存储单元，并且能够由用户去改变其值的量，而右值i++不可以。比如说：<br>
<code>int i=0；</code><br>
<code>++i=1;//正确</code><br>
<code>i++=1;//错误</code><br>
左值与右值的根本区别在于是否允许取地址&amp;运算符获得对应的内存地址，左值允许，右值不允许。如<br>
<code>&amp;（++i）//正确</code><br>
<code>&amp; (i++) //错误</code><br>
为什么++i允许，而i++不允许呢？</p>
<blockquote>
<p>C/C++语言中可以放在赋值符号左边的变量，即具有对应的可以由用户访问的存储单元，并且能够由用户去改变其值的量。左值表示存储在计算机内存的对象，而不是常量或计算的结果。或者说左值是代表一个内存地址值，并且通过这个内存地址，就可以对内存进行读并且写（主要是能写）操作；这也就是为什么左值可以被赋值的原因了。相对应的还有右值：当一个符号或者常量放在操作符右边的时候，计算机就读取他们的“右值”，也就是其代表的真实值。简单来说就是，<strong>左值相当于地址值，右值相当于数据值.</strong><br>
区别二：i++是先运算后自加；++i是先自加后运算。比如说：<br>
i=3<br>
n=i++,此时，n=3，i=4（先赋值运算，后加1）<br>
n=++i，此时，n=4，i=4（先加1，后赋值运算）</p>
</blockquote>
<p>②指针+-整数<br>
float arr[5];<br>
float *vp；//定义一个指针变量<br>
for (vp=&amp;arr[0]; vp&lt;arr[5]; ){<br>
.    *vp++ = 0；<br>
}<br>
指针vp指向数组arr的首元素地址，<em>vp++=0先赋值给</em>vp为0，在vp+1指向第二个元素，第二个元素=0；直至第五个元素也为0.</p>
<p>③指针-指针（地址-地址）<br>
<strong>必须是同类型指针</strong><br>
int arr[5]={1，2，3，4，5}<br>
&amp;arr[5]-&amp;arr[0]=5//结果是两指针中间的元素个数</p>
<p>④指针比较大小<br>
法一：<br>
for(vp = &amp;arr[5];vp&gt;&amp;arr[0]; ){<br>
*--vp = 0;<br>
}<br>
法二：<br>
for(vp = &amp;arr[5-1];vp&gt;=&amp;arr[0];vp-- ){<br>
*vp = 0;<br>
}<br>
<img src="https://i.loli.net/2021/08/20/gcrhOHvAQuFzMWX.jpg" alt="45B7DCFB9A811FFDE08257C77052CAD4.png" loading="lazy"><br>
但是更推荐第一种方法，标准规定：允许指向数组元素的指针与指向数组最后一个元素后面的那个内存位置的指针比较即法一，不允许与指向第一个元素之前的那个内存位置的指针进行比较。</p>
<h3 id="14-二级指针">1.4 二级指针</h3>
<h4 id="141-定义">1.4.1 定义</h4>
<p><code>int a=10;</code><br>
<code>int * p1 = &amp;a;//一级指针，int*分开，int表示p1指向的对象类型是int整形，*表示p1是指针</code><br>
<code>int* * p2=&amp;p1//二级指针，int*表示p2指向的对象类型是int*指针即p1，右边的*表示p2是一个指针;</code><br>
<img src="https://i.loli.net/2021/08/21/nfOQ3Bpzulj62Xo.jpg" alt="578EF3F9DF179721C36EF69E71A84A8F.png" loading="lazy"></p>
<h4 id="142-用法">1.4.2 用法</h4>
<p>解引用：<br>
*p1=**p2=a=10<br>
*p2=p1</p>
<h4 id="143-指针与数组">1.4.3 指针与数组</h4>
<p>#####（1）指针数组<br>
指针数组就是存放指针的数组。<br>
<code>int a = 10;</code><br>
<code>int b = 20;</code><br>
<code>int c = 30;</code><br>
<code>int* pa=&amp;a;</code><br>
<code>int* pb=&amp;b;</code><br>
<code>int* pc=&amp;c;</code><br>
为了方便，我们可以将pa,pb,pc指针存放在一个数组中。<br>
<code>int* arr[3]={&amp;a,&amp;b,&amp;c}</code><br>
或<code>int* arr[3]={pa，pb，pc}</code><br>
遍历访问元素：<br>
<code>int i=0;</code><br>
<code>for(i=0;i&lt;3,i++){</code><br>
<code>. *(arr[i])</code><br>
<code>}</code></p>
<h5 id="2数组指针">(2)数组指针</h5>
<p>存放数组的指针。见进阶</p>
<h2 id="三-指针进阶">三、指针进阶</h2>
<h3 id="11-字符指针">1.1 字符指针</h3>
<h4 id="111-定义">1.1.1 定义</h4>
<p>法一：<br>
<code>char ch = 'abc;</code><br>
<code>char* pc = &amp;ch;</code><br>
法二：<br>
<code>char* p = &quot;abc&quot;//把常量字符串“abc”的首元素a的地址放进了p中，而不是内容abc</code><br>
这个严格来说应该这么写：const char* p=&quot;abc&quot;,理由后面介绍。<br>
<strong>补充：字符数组和字符指针</strong><br>
（1）字符数组：<br>
char arr1[4]=&quot;abcd&quot;<br>
char arr2[4]=&quot;abcd&quot;<br>
定义的是一个<strong>字符数组</strong>，所以就相当于定义了一些空间来存放&quot;abcd&quot;，而又因为字符数组就是把字符一个一个地存放的，所以编译器把这个语句解析为 <code>char arr[5] = {'a','b','c','d','\0'};</code> 回顾之前到讲到的，sizeof(arr[5])=5; 扩展一下，如果char arr[] = &quot;abcd&quot;是在函数内部写的话，那么这里 的&quot;abcd/0&quot;因为不是常量，所以应该被<strong>放在栈上</strong>。<br>
另外，arr1！=arr2，因为arr1，arr2分别定义了各自的空间来存储内容，这里恰巧两个的字符数组的内容一样而已。故，两者不一样。<br>
（2）字符指针：<br>
char* p1=&quot;abcd&quot;<br>
char* p2=&quot;abcd&quot;<br>
定义的是一个<strong>普通指针</strong>，并没有定义空间来存放&quot;abcd&quot;，所以编译器得帮我们找地方来放&quot;abcd&quot;，显然，把这里的&quot;abcd&quot;<strong>当成常量</strong>并把它放到程序 的常量区是编译器最合适的选择。拓展一下，<br>
字符指针指向的字符串保存在内存的<strong>静态存储区</strong>中。<br>
因为是常量字符串，如下操作：<br>
char* p1=&quot;abcd&quot;<br>
<em>p1=“h”<br>
错误，常量字符串不可修改。<br>
另外，p1==p2,因为p1，p2都是常量，内容都是“abcd”，都指向同一个内存空间。<br>
此处，为避免错误，还是写成const char</em> p=&quot;abcd&quot;为好。<br>
<strong>总结一下就是</strong>：<br>
首先在内存的中位置不同，字符数组保存的字符串存放在内存的栈中，而字符指针指向的字符串保存在内存的静态存储区中。<br>
其次字符数组保存的字符串属于字符串变量，可以被修改，而字符指针指向的字符串是属于字符串常量，不能被修改。</p>
<h3 id="12-指针数组">1.2 指针数组</h3>
<h4 id="121定义">1.2.1定义</h4>
<p>指针数组是一个数组，用来存放指针。<br>
<code>int* p[10]={0}//存放整形指针的数组-指针数组</code><br>
<code>char* p[10]={0}//存放字符指针的数组-指针数组</code></p>
<h4 id="122-使用">1.2.2 使用</h4>
<p>指针数组访问每个元素：<br>
<img src="https://i.loli.net/2021/08/21/pmWCfOr2cnHeBYE.jpg" alt="C44DCD448B908F2605F09E92CA0CB1D6.png" loading="lazy"></p>
<h3 id="13-数组指针">1.3 数组指针</h3>
<p>数组指针是一个指针,(*p)，用来指向数组的指针。<br>
<code>int* p=NULL //p是整形指针-指向整型的指针-存放整形的地址</code><br>
<code>char* pc=NULL //pc是字符指针-指向字符的指针-存放字符的指针</code><br>
<code>int (*p )[10]=&amp;arr //数组指针-指向数组的指针-存放数组的地址</code><br>
关于数组的地址，前面有讲过，即&amp;arr。<br>
书写方法：<br>
<code>char* arr[5];</code><br>
<code>char* (*p)[5]=&amp;arr;</code><br>
<code>int arr2[10]={0];</code><br>
<code>int (*p2)[10]=&amp;arr2;</code><br>
<img src="https://i.loli.net/2021/08/21/SQ1ldu4hLVz3jc7.jpg" alt="3E1E655F9C0BB99BB0CEBFA54188BCD8.png" loading="lazy"></p>
<p><strong>补充</strong>：关于<code>*</code>星号<br>
①在定义变量时，代表着该变量是一个指针<br>
<code>int a=10;</code><br>
<code>int* p=&amp;a;</code><br>
②在取值操作时，叫解引用，即得到指针指向的地址的内容<br>
<code>*p=a=10</code><br>
③ <em>&amp;放在一起，抵消掉，如：<br>
<code>int a,b; a=100; b=100; int *p,*q; p=&amp;a; q=&amp;b; *p=*q;</code><br>
代入：</em>&amp;a=<em>&amp;b<br>
抵消：a=b<br>
④有</em>，&amp;符号出现，就说明此处用到了指针，指针（或者说数组/数组元素地址）的大小在32位平台是4，64位平台是8。原因：在32位cpu上，指针能够存储这2^32次个地址就需要4个字节。（1字节=8位）.</p>
<p>遍历方法：<br>
<code>int arr[10]={1,2,3,4,5,6,7,8,9,10};</code><br>
<code>int* p=arr;</code><br>
<code>int i=0;</code><br>
<code>for(i=0;i&lt;10;i++){</code><br>
<code>. printf(&quot;%d&quot;, *(p+i))</code><br>
<code>. printf(&quot;%d&quot;, *(arr+i))//用指针的方法打印</code><br>
<code>. printf(&quot;%d&quot;, arr[i])//普通的数组打印方式</code><br>
<code>. printf(&quot;%d&quot;,p[i])</code><br>
<code>四种打方式结果一样</code><br>
<code>}</code><br>
<strong>关于二维数组</strong>：<br>
二维数组的数组名是首元素的地址，这里的首元素不是第一行第一列的元素，而是<strong>第一行所有的元素</strong>。（这里把二维数组理解成特殊的一维数组）<br>
遍历二维数组的元素：<br>
法一：<br>
参数是数组的形式<br>
<img src="https://i.loli.net/2021/08/22/qK58x7h1s4XYHMm.jpg" alt="DA639532E4498FFE5C0A66F394D3AF9E.png" loading="lazy"><br>
法二（用数组指针）：<br>
参数是指针的形式<br>
<img src="https://i.loli.net/2021/08/22/c5XxHB4qFugTyM1.jpg" alt="A8FB103EAB5EEAA1A9184E52A280E973.png" loading="lazy"><br>
<strong>难点</strong>：解释下为什么是*（*（p+i）+j）:<br>
<img src="https://i.loli.net/2021/08/22/6RnNg1UVHdQmxcG.jpg" alt="68FFA06AF3561E2E87D20CCF57FB38DA.png" loading="lazy"><br>
<img src="https://i.loli.net/2021/08/22/EsRiIfSlA3yWgbY.jpg" alt="A3B5175C0E54F9E231E4D23021FFC860.png" loading="lazy"><br>
<img src="https://i.loli.net/2021/08/22/CI9uzdDsZ4Qfky7.jpg" alt="3F1D262BFBAD01ED5F494E2407CB49CC.png" loading="lazy"><br>
补充：<br>
*（*（p+i）+j）的等效写法：<br>
①（*（p+i）[j]）//备注：<code>*</code>（p+i）=p[i],。<code>*</code>（p+i）=p[i], 比如说，p是二维数组arr的首元素地址p=arr=&amp;arr1，<code>*</code>p=p[0]是一维数组arr1的首元素地址。<br>
②<code>*</code>（p[i]+j）<br>
③p[i][j]<br>
④二维数组的数组名是地址的地址<code>a=&amp;a[0]=&amp;&amp;a[0][0]</code>,一次解引用：<code>*a=&amp;a[0][0]</code>,二次解引用：<code>**a=a[0][0]</code><br>
<strong>a[0]讲解</strong>：<br>
<img src="https://i.loli.net/2021/08/26/GLQSEw6k7DWzNKI.png" alt="image.png" loading="lazy"><br>
<img src="https://i.loli.net/2021/08/26/bjduhJelfMyNc8p.png" alt="image.png" loading="lazy"><br>
<a href="http://c.biancheng.net/view/227.html">二维数组指针表示，C语言指针引用二维数组详解</a></p>
<h3 id="14关于以上几种类型的总结">1.4关于以上几种类型的总结</h3>
<p>①int arr[5]//arr是一个5<br>
个元素的整型数组<br>
②int* parr1[10]//parr1是一个数组，数组有10个元素，每个元素的类型是int*, parr1是指针数组<br>
③int(* parr2)[10]//parr2是一个指针，该指针指向了一个数组，该数组有10个元素，每个元素的类型是int， parr2是数组指针<br>
④int (* parr3[10]）[5])//parr3是一个数组，该数组有10个元素，每个元素是一个数组指针，该数组指针指向的数组有5个元素，每个元素的类型是int。</p>
<h3 id="15-数组参数">1.5 数组参数</h3>
<h4 id="151-一维数组">1.5.1 一维数组</h4>
<p>（1）数组在传参的时候可以将参数写成数组，也可以写成指针。如<br>
<code>void test(int arr[])</code><br>
<code>{ }</code><br>
<code>void test(int arr[10])</code><br>
<code>{ }</code><br>
<code>void test(int *arr);</code><br>
<code>{ }</code><br>
<code>int main(){</code><br>
<code>int arr[10]={0};</code><br>
<code>test(arr);</code><br>
<code>}</code><br>
这三种传参都是正确的。<br>
（2）指针数组在传参的时候可以将参数写成数组，也可以写成指针。如<br>
<code>void test(int* arr[])//数组类型是int*</code><br>
<code>{ }</code><br>
<code>void test(int* arr[10])</code><br>
<code>{ }</code><br>
<code>void test(int** arr);</code><br>
<code>{ }</code><br>
<code>int main(){</code><br>
<code>int* arr[10]={0};</code><br>
<code>test(arr);</code><br>
<code>return 0;</code><br>
<code>}</code><br>
这三种传参也是正确的。</p>
<h4 id="152-二维数组">1.5.2 二维数组</h4>
<p>(1)数组名写法<br>
<code>void test (int arr[3][5]) // 写成int arr[][5],不可以写成int arr[3][],行可以省略，列不可以省略</code><br>
<code>{ }</code><br>
<code>int main(){</code><br>
<code>int arr[3][5]={0};</code><br>
<code>test(arr);</code><br>
<code>return 0;</code><br>
<code>}</code><br>
（2）指针写法<br>
①<code>void test (int* arr)//写法错误，整形指针只存放整形，不能存放数组，而arr是二维数组的首元素地址，也就是第一行数组的地址</code><br>
<code>{ }</code><br>
②<code>void test (int** arr)//写法错误，二级指针是用来存放一级指针的地址，而arr是一个数组的地址</code><br>
<code>{ }</code><br>
③<code>void test (int* arr[5]）//写法错误，arr是一个数组，每个元素类型是int*</code><br>
<code>{ }</code><br>
④<code>void test (int（* arr)[5]）//写法正确，arr是一个指针，指向第一行数组的五个元素，类型是int</code><br>
<code>{ }</code></p>
<p><code>int main(){</code><br>
<code>int arr[3][5]={0};</code><br>
<code>test(arr);</code><br>
<code>return 0;</code><br>
<code>}</code></p>
<h3 id="16-指针传参">1.6 指针传参</h3>
<h4 id="161-一级指针传参">1.6.1 一级指针传参</h4>
<p><code>void test1(int* p)//传过来的是地址（整形指针），所以这里要用一个指针来接收</code><br>
<code>{}</code><br>
<code>int main()</code><br>
<code>{</code><br>
<code>int a=10;</code><br>
<code>'test1(&amp;a);//传过去的是地址</code><br>
<code>int* p=&amp;a;</code><br>
<code>test1(p);//传过去的是a的地址，将a的地址存在指针变量p里面</code><br>
<code>}</code></p>
<h4 id="162-二级指针传参">1.6.2 二级指针传参</h4>
<p><code>void test1(int** ptr)//传过来的是一级指针的地址，所以这里要用一个二级指针来接收</code><br>
<code>{}</code><br>
<code>int main()</code><br>
<code>{</code><br>
<code>int a=10;</code><br>
<code>int* p=&amp;a;</code><br>
<code>int** pp=&amp;p//pp是二级指针;</code><br>
<code>test1(pp);//传过去的是一级指针p的地址，将p的地址存在二级指针变量pp里面</code><br>
<code>test1(&amp;p);</code><br>
<code>int* arr[10];//定义一个指针数组，里面存放着一级指针</code><br>
<code>test1(arr)//arr是数组首元素地址，也就是一级指针的地址</code><br>
<code>}</code><br>
故，当函数的参数为二级指针得时候，参数可以是：</p>
<ul>
<li>一级指针变量的地址</li>
<li>二级指针变量本身</li>
<li>存放一级指针的指针数组的数组名</li>
</ul>
<h3 id="17-函数指针">1.7 函数指针</h3>
<blockquote>
<p>数组指针-指向数组的指针-存放数组的地址- int （* p）[10]<br>
函数指针-指向函数的指针-存放函数的地址- int (* p)(in tx, int y)//函数指针类型int（* ）(int x,int y),p是一个函数声明。</p>
</blockquote>
<p>使用方法：<br>
<code>int ADD(int x,int y)</code><br>
<code>{ ...}</code><br>
<code>int main()</code><br>
<code>{</code><br>
<code>int(* p)(int x,int y);</code><br>
<code>p(2,3);</code><br>
<code>ADD(2,3);</code><br>
<code>(*p)(2,3)</code><br>
<code>(*ADD)(2,3)</code><br>
//以上四种调用函数ADD的方法都正确<br>
//调用的时候，<em>的数量没有用，*没有意义<br>
}<br>
<strong>补充</strong>：<br>
①&amp;函数名和函数名都是函数的地址<br>
②<code>( *( void ( * )( ) ) 0 )( )</code><br>
把0强制类型转换成：void（</em>）（）函数指针类型，0就是一个函数的地址。（*（...）0）（）调用0地址处的该函数。<br>
<img src="https://i.loli.net/2021/08/24/oOjNX1SQyGRAda4.jpg" alt="7BFF3224902709BEBD81A459A9B85EBA.png" loading="lazy"><br>
③<code>void (*signal(int , void(\*)(int) ) )( int )</code><br>
signal是一个函数声明，signal的函数有2个参数，一个是int，一个是void（*）（int）函数指针，该函数指针指向的函数的参数类型是int，返回类型是void。<br>
signal返回类型也是一个函数指针，该函数指针指向的函数的参数类型是int，返回类型是void。<br>
<img src="https://i.loli.net/2021/08/24/XFP8aHCBV32Gpul.jpg" alt="998BCF01EE1477E5377EA6CB62A038F1.png" loading="lazy"><br>
该代码可以简化成：<br>
<code>typedef void(*pfun_t)(int);</code><br>
<code>pfun_t signal(int,pfun_t);</code></p>
<h3 id="18-函数指针数组">1.8 函数指针数组</h3>
<blockquote>
<p>指针数组-int* arr[5]<br>
函数指针-int(* p)(int int)=ADD//函数指针的返回类型是int<br>
函数指针数组-存放多个函数的地址即函数指针的地址-int (* parr[4])(int ,int)={ADD，SUB，MUL，DIV} : parr是一个数组，有四个元素，每个元素的类型是函数指针。<br>
使用方法：<br>
<img src="https://i.loli.net/2021/08/24/kMZ84eXFqIm9rfK.jpg" alt="54534461C7AE1C2103A898909C18F447.png" loading="lazy"><br>
<img src="https://i.loli.net/2021/08/24/8Iy4TmaEgQ9K1pO.jpg" alt="5EF41F24FFDF6D50042FDC58A08F8909.png" loading="lazy"><br>
函数指针数组的用途--转移表：<br>
计算器案列：<br>
<img src="https://i.loli.net/2021/08/25/659vjLIO7GyqF3d.jpg" alt="3708AF522E4CB38219F79C1C1F19CFE9.png" loading="lazy"><br>
<img src="https://i.loli.net/2021/08/25/8e6MnTfNCAV5LEH.jpg" alt="90D8B061A551E15E4C23E4FAF57ECD0C.png" loading="lazy"><br>
<code>int main(){</code><br>
<img src="https://i.loli.net/2021/08/25/8HdbgF39rNuwKEj.jpg" alt="941F2A237891277A6F5C69ED5F6E90A5.png" loading="lazy"><br>
<code>}</code><br>
//pfArr是一个函数指针数组，又叫<strong>转移表</strong></p>
</blockquote>
<h3 id="19-指向函数指针数组的指针">1.9 指向函数指针数组的指针</h3>
<h4 id="191-定义">1.9.1 定义</h4>
<blockquote>
<p>数组指针-指向数组的指针-存放数组的地址<br>
<strong>指向</strong>函数指针的<strong>数组的指针</strong>--存放着函数指针数组的地址<br>
<code>int (* pf)(int , int)//函数指针</code><br>
<code>int(* pfArr[4])(int , int)//函数指针数组，pfArr是一个数组，函数指针数组</code><br>
<code>int(* (* ppfArr[4] )(int , int))//指向函数指针数组的指针，ppfArr是一个数组指针，指针指向的数组有4个元素，每个元素的类型是一个函数指针int( * )(int ， int)</code></p>
</blockquote>
<h4 id="192-回调函数">1.9.2 回调函数</h4>
<p>回调函数就是一个通过函数指针调用的函数。<br>
解释一下就是，如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。<br>
<img src="https://i.loli.net/2021/08/25/mcNEvqh3pGIAuz6.jpg" alt="5F6F9B79E94B7BDC76CC38BF4165918E.png" loading="lazy"><br>
<img src="https://i.loli.net/2021/08/25/WVZv6nqIaQhtRTY.jpg" alt="7792398E32ECC37B66A771CF81F9A11D.png" loading="lazy"></p>
<h4 id="193-qsort函数">1.9.3 qsort函数</h4>
<p>...</p>
<h2 id="三-指针和数组笔试题">三、指针和数组笔试题</h2>
<h3 id="11-一维数组">1.1 一维数组</h3>
<h4 id="111-sizeof问题">1.1.1 sizeof（）问题</h4>
<p>（1）整形数组<br>
<img src="https://i.loli.net/2021/08/26/FMcJQPtNDVCXglS.jpg" alt="6E1DF6FFED58870A2EE70D54214D60E1.png" loading="lazy"><br>
（2）字符数组<br>
<img src="https://i.loli.net/2021/08/26/wXdbFlDQnZ6jsUc.jpg" alt="3C0A56436314CA6797997DC39E1480C1.png" loading="lazy"><br>
（3）初始化为字符串的数组<br>
<img src="https://i.loli.net/2021/08/26/NncVZprbhId5qlC.jpg" alt="E4E7C6619A0928C82DEEC316B52BD96A.png" loading="lazy"></p>
<p><strong>总结</strong>：<br>
一个指针（或者说数组/数组元素地址）的大小在32位平台是4，64位平台是8。原因：在32位cpu上，指针能够存储这2^32次个地址就需要4个字节。（1字节=8位），64位同理；</p>
<ol>
<li>求地址的大小（数首元素地址，下一个元素地址，整个数组地址，下一个数组地址...）都是4/8字节。</li>
<li>求元素的大小，就看是整形还是字符，整形4个字节，字符型1个字节。</li>
<li>不分char，int等类型，只要是求地址大小，都是4/8.</li>
</ol>
<h4 id="112-strlen问题">1.1.2 strlen（）问题</h4>
<p>（1）字符数组<br>
<img src="https://i.loli.net/2021/08/26/JhEeWFNPSu8Rg71.jpg" alt="CFF17643EF1DDF3651E11DF7868CDF5C.png" loading="lazy"></p>
<p>（2）初始化为字符串的数组<br>
<img src="https://i.loli.net/2021/08/26/R9YgpdVoxcAqjlT.jpg" alt="B014F4E9A7AA3444AA90341EE8A740C3.png" loading="lazy"></p>
<p><strong>总结</strong>：<br>
C 库函数 size_t strlen(const char *str) <strong>接收的类型是地址char *</strong>，函数返回值是<strong>无符号</strong>的。从给定地址<strong>往后寻找，从给定直到空结束字符</strong>（不包括空结束字符），然后返回字符串 str 的长度。<br>
如果传给strlen（）的参数是未可知范围的地址，strlen会<strong>一直走下去，直到遇到&quot;\0&quot;为止</strong>，‘\0’出现位置是未知的，结果就是随机值（如char arr[]={'a','b','c'},strlen(arr) 随机）；<br>
如果传给strlen（）的地址后面会出现'\0',那么就返回字符串的长度（char arr[]=“abc”,strlen(arr) =6）；<br>
如果传给strlen的参数是一个具体的元素而不是一个地址，这样会把字符a的ascii码值97传给strlen函数，而此函数是访问不到这个地址的，因此会程序中断。（char arr[]={'a','b','c'},strlen(*arr) 报错）。</p>
<h3 id="12-二维数组">1.2 二维数组</h3>
<p><img src="https://i.loli.net/2021/08/26/8epkiAL5jqvSQUx.jpg" alt="B053D9CFA981E7D94BB602A60568EDBB.png" loading="lazy"><br>
<strong>总结</strong><br>
①<strong>a[0]</strong>：<br>
a[0]是二维数组的第一行，是二维数组的首元素地址，a[0]是第一行的数组名，也就是一维数组的首元素地址，即a[0]=&amp;a[0][0]<br>
<img src="https://i.loli.net/2021/08/26/GLQSEw6k7DWzNKI.png" alt="image.png" loading="lazy"><br>
<img src="https://i.loli.net/2021/08/26/bjduhJelfMyNc8p.png" alt="image.png" loading="lazy"><br>
<a href="http://c.biancheng.net/view/227.html">二维数组指针表示，C语言指针引用二维数组详解</a><br>
②<strong>a</strong>：<br>
a是二维数组的数组名，没有sizeof（数组名），也没有&amp;（数组名），所以a是二维数组的首元素地址，将二维数组看成一维数组，a就是第一行的地址即a=&amp;a[0]，又因为a[0]是a[0][0]的地址，有a == &amp;(&amp;a[0][0])<br>
即二维数组名 a 是地址的地址。<br>
③<strong>数组名的意义</strong><br>
数组名有：一维数组arr，二维数组a，二维数组的第i行a[i]</p>
<ol>
<li>sizeof（数组名），这里的数组名表示整个数组，<strong>计算的是整个数组的大小，单位是字节，元素个数x单个字节</strong></li>
<li>&amp;数组名，表示是<strong>整个数组的地址</strong></li>
<li>除此之外所有的数组名表示<strong>首元素地址</strong></li>
</ol>
<h3 id="13-指针">1.3 指针</h3>
<p>题一：<br>
<img src="https://i.loli.net/2021/08/26/2JE8bzZvfmWiICw.jpg" alt="E4AEB2F154EB0CF349FF989215F6F150.png" loading="lazy"><br>
<code>*</code>（ptr-1）= ptr[-1]--&gt;<code>*</code>(<code>*</code>(p+4)+2)=p[4][2]<br>
题二：<br>
<img src="https://i.loli.net/2021/08/26/RDiMUbezXnQ7NkS.jpg" alt="49D93CBF82EB3C4691F2F1AF2FBEBA48.png" loading="lazy"><br>
题三：<br>
<img src="https://i.loli.net/2021/08/26/Ek2ze6wsuQRLXK8.jpg" alt="90EB76D407B4B9D33A5A7C632BABD810.png" loading="lazy"><br>
题四：<br>
<img src="https://i.loli.net/2021/08/26/FypcbJhLRNEGgxH.jpg" alt="EBE0D6260023967117C84099F6CA2F3C.png" loading="lazy"></p>
<p><strong>补充</strong>：<br>
逗号表达式：<br>
a=（表达式1, 表达式2），先求解表达式 1，再求解表达式 2。整个逗号表达式的值是表达式 2 的值。<br>
如：a=（1，2），a就是2；b=(count=19, incr=10, count+1)，b就是20。<br>
题五：<br>
<img src="https://i.loli.net/2021/08/27/vkAztJ1sd9luwBG.jpg" alt="F31CE35ECE9FD1609C977B8F2CE2001F.png" loading="lazy"><br>
题六：<br>
<img src="https://i.loli.net/2021/08/27/bO9eVaocxthGSMF.jpg" alt="60D39AC3AA0BC9F35A701E733D1F908B.png" loading="lazy"><br>
<img src="https://i.loli.net/2021/08/27/equioEO9KMPbA8w.jpg" alt="BA7492B4E8234FECD101340FA8A9150E.png" loading="lazy"><br>
<img src="https://i.loli.net/2021/08/27/3T7Ex8kmSWwK4nt.jpg" alt="81DD4BBD6B545FCAD6C5F6C3FA2F131C.png" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于Gridea数据（文章，标签清空）的原因和解决方法]]></title>
        <id>https://mucixia.github.io/post/guan-yu-gridea-shu-ju-wen-zhang-biao-qian-qing-kong-de-yuan-yin-he-jie-jue-fang-fa/</id>
        <link href="https://mucixia.github.io/post/guan-yu-gridea-shu-ju-wen-zhang-biao-qian-qing-kong-de-yuan-yin-he-jie-jue-fang-fa/">
        </link>
        <updated>2021-08-16T08:10:20.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2021/08/16/G6EobCWkKingQBD.png" alt="68747470733a2f2f67767a2d626c6f672e6f73732d636e2d6368656e6764752e616c6979756e63732e636f6d2f696d672f32303230303330323137313331322e706e67.png" loading="lazy"></figure>
<p><strong>原因</strong><br>
今天我想更新一篇文章，在设置封面图的时候，选择了外链的方式打开，结果...Gridea的数据全没了，后来查明是因为在软件内填写封面图地址时，填入地址不合法，导致生成的md文件中“feature” 不合法。会导致软件无法读取数据。地址应该是url，而我用<a href="https://sm.ms/"></a>地址转换网站转换成markdown格式传上去了，就导致了后续的错误。</p>
<p><strong>解决办法</strong><br>
找到Gridea的存储路径，我的是C:\Users\hp\Documents\Gridea，里面找到/post文件夹，然后找到你最近一次修改过的文章，<img src="https://i.loli.net/2021/08/16/tO8KVWgdLuBM4s7.png" alt="QQ截图20210816164110.png" loading="lazy">,点进去将feature删除，<img src="https://i.loli.net/2021/08/16/E6FOu5vGilBXSZt.png" alt="QQ截图20210816164314.png" loading="lazy">保存后再次打开Gridea客户端即可。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[算法与数据结构]]></title>
        <id>https://mucixia.github.io/post/suan-fa-yu-shu-ju-jie-gou/</id>
        <link href="https://mucixia.github.io/post/suan-fa-yu-shu-ju-jie-gou/">
        </link>
        <updated>2021-08-16T08:08:16.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>“程序=数据结构+算法”<br>
——Pascal语言之父-Nicklaus Wirth</p>
</blockquote>
<h2 id="一-绪论">一、绪论</h2>
<h3 id="11-研究内容">1.1 研究内容</h3>
<p>具体问题抽象为<strong>数学模型</strong>-&gt;分析问题、<strong>提取操作对象</strong>、<strong>找出操作对象间的关系</strong>、用<strong>数学语言</strong>描述。其中，操作对象和对象间的关系也就是数据结构。如何根据关系状态来解决问题用的方法就是算法。📐📏</p>
<h3 id="12-基本概念于术语">1.2  基本概念于术语</h3>
<h4 id="1数据">（1）数据</h4>
<p>数据是能输入计算机且能被计算机处理的<strong>各种符号的集合</strong>。包括数值型数据：int、float等；非数值型数据：文字、图像、声音等。</p>
<h4 id="2数据元素与数据项">（2）数据元素与数据项</h4>
<p>数据元素是<strong>数据的基本单位</strong>，在计算机程序中通常作为一个整体进行考虑和处理；数据项是<strong>数据元素不可分割的最小单位</strong>。比如，学生李华的姓名、学号、年龄等是一个数据元素，其中的姓名就是一个数据项。</p>
<h4 id="3数据对象">（3）数据对象</h4>
<p>数据对象是<strong>性质相同的****数据元素的集合</strong>，是数据集合的子集。比如整数集合，字母集合。<br>
我画了如下一张图来表示他们之间的关系👇📣：<br>
<img src="https://i.loli.net/2021/08/16/36fNPOAxw2eSXKT.jpg" alt="QQ图片20210816181239.jpg" loading="lazy"></p>
<h4 id="4数据结构">（4）数据结构</h4>
<p>数据结构是带结构的数据元素的集合；结构是指数据元素之间的关系。<br>
数据结构的分类：</p>
<ol>
<li><strong>逻辑结构</strong>：数据元素之间的<strong>逻辑关系</strong></li>
<li><strong>物理（存储）结构</strong>：数据元素及其关系在计算机内存中的表示（又称映像）</li>
<li><strong>运算和实现</strong>：对数据元素的操作</li>
</ol>
<p><strong>逻辑结构和存储结构的关系：</strong></p>
<ol>
<li>存储结构是逻辑关系的映像与元素本身之间的映像</li>
<li>逻辑结构是数据结构的抽象，存储结构是数据结构的实现</li>
<li>两者建立了数据元素之间的结构关系<br>
<strong>逻辑结构的种类：</strong></li>
<li>线性结构：最多只有一个直接前驱和直接后继</li>
<li>非线性结构：可能有多个直接前驱和直接后继<br>
<strong>存储结构的分类：</strong></li>
<li>顺序存储：用一组<strong>连续</strong>的存储单元<strong>依次</strong>存储数据元素，数据元素之间的逻辑关系由元素的存储位置决定的。C语言中用<strong>数组</strong>表示</li>
<li>链式存储：用一组<strong>任意</strong>的存储单元存储数据元素，数据元素之间的逻辑关系用<strong>指针</strong>来表示。</li>
<li>索引存储：在存储信息的同时，还建立了附加的索引表。</li>
<li>散列存储：根据结点的关键字直接计算出该结点的存储地址。</li>
</ol>
<h4 id="5数据类型">（5）数据类型</h4>
<ol>
<li>数据类型<br>
包括int、float等基本数据类型，数字、结构、共用体等构造数据类型，指针。<br>
数据类型是一组性质相同的<strong>值的集合</strong>和定义于这个值集合上的<strong>一组操作</strong>的总称。</li>
<li>抽象数据类型（ADT）<br>
形式定义：（D、S、P）三元组表示，<br>
D:数据对象； S：对象的关系集合； P：对D的基本操作集合<br>
定义格式：<br>
ADT 抽象数据类型名{<br>
数据对象：定义<br>
数据关系：定义<br>
基本操作：定义<br>
} ADT 抽象数据类型名<br>
其中基本操作的定义内容为：<br>
参数表：赋值参数，为操作提供输入值；引用参数：用连字符&amp;表示，返回操作结果、<br>
初始条件和操作结果。</li>
</ol>
<p><strong>概念小结：</strong><br>
<img src="https://i.loli.net/2021/08/16/YAMOEsUzSRwgKcn.jpg" alt="QQ图片20210816191217.jpg" loading="lazy"></p>
<h3 id="13-算法与算法分析">1.3 算法与算法分析</h3>
<h4 id="131-算法特性">1.3.1 算法特性：</h4>
<ol>
<li>有穷性</li>
<li>确定性</li>
<li>可行性</li>
<li>输入</li>
<li>输出</li>
</ol>
<h4 id="132-设计要求">1.3.2 设计要求</h4>
<ol>
<li>正确性</li>
<li>可读性</li>
<li>健壮性</li>
<li><strong>高效性</strong></li>
</ol>
<h4 id="133-算法效率">1.3.3 算法效率</h4>
<p>算法的复杂度分析是<strong>事前估计</strong>，考虑其<strong>最坏情况</strong>，用大写O（f（n））表示。</p>
<h5 id="1时间复杂度">(1)时间复杂度</h5>
<p>算法运行时间= （语句频度）每条语句的<strong>执行次数</strong>执行时间之和<br>
—&gt;单次执行时间由机器决定，所以<strong>算法运行时间只讨论语句频度</strong><br>
<strong>如何计算时间复杂度：</strong><br>
<strong>计算规则</strong>：忽略常数、忽略系数、只取最高次项。<br>
<strong>计算流程</strong>：算法中<strong>基本语句重复执行的次数</strong>是<strong>问题规模n</strong>的某个函数f（n），算法的时间量度记作：T(n)=O(f(n)),O(f(n))称为<strong>算法的渐进时间复杂度</strong>（O是数量级的符号），简称为<strong>时间复杂度</strong>。<br>
首先，找到基本语句（即执行次数最多的语句），<br>
还有关于问题规模n的函数f（n）：</p>
<ul>
<li>排序：n为记录数</li>
<li>矩阵：n为矩阵的阶数</li>
<li>多项式：n为项数</li>
<li>集合：n为元素个数</li>
<li>树：n为树的结点个数</li>
<li>图：n为图的顶点数或边数<br>
最后用O表示<br>
<strong>计算方法</strong>：<br>
<strong>定理一</strong>:找最高次项<img src="https://i.loli.net/2021/08/18/16CyPoLYbAHQrBX.jpg" alt="QQ图片20210818004811.jpg" loading="lazy"><br>
<strong>例子</strong>：</li>
<li>for循环：嵌套几个for循环，时间复杂度就是n的多少次方</li>
<li>关于log2n的问题</li>
<li>...<br>
常见时间复杂度：</li>
<li>执行常数次操作：O(1)</li>
<li>二分查找：O（logN）</li>
<li>线性查找：O（N）</li>
<li>归并排序、快速排序：O（NlogN）</li>
<li>选择排序、插入排序：O（N^2）</li>
<li>搜索算法：O（2^N）</li>
</ul>
<h2 id="二-线性表">二、线性表</h2>
<p>逻辑结构分为线性结构和非线性结构，其中线性结构有线性表、栈、队列、字符串、数组、广义表等。<br>
线性表有两种基本存储结构：顺序存储和链式存储。</p>
<h3 id="11-线性表的定义及特点">1.1 线性表的定义及特点</h3>
<h4 id="1定义">（1）定义</h4>
<p>线性表是具有<strong>相同特性</strong>的数据元素的<strong>有限序列</strong>,记作（a1,a2,a3, a4, a5, a6......an），其中a1为线性起点，an为线性终点，a3的直接前驱是a2，直接后继是a4；数据元素的个数n叫表长，n=0是叫空表。</p>
<h4 id="2特点">(2)特点</h4>
<ol>
<li>开始节点：有且只有一个，没有直接前驱，有且只有一个直接后继</li>
<li>终端节点：有且只有一个，没有直接后继，有且只有一个直接前驱</li>
<li>中间节点：有且只有一个直接前驱，有且只有一个直接后继</li>
</ol>
<h4 id="3案例">（3）案例</h4>
<ol>
<li>稀疏多项式：没有包含所有x的幂的多项式<br>
如A=7+3x+9x<sup>8+5x</sup>17<br>
B=8x+22x<sup>7-9x</sup>8<br>
用线性表表示：p=（系数，指数）<br>
A=((7,0),(3,1),(9,8),(5,17))<br>
B=((8,1),(22,7),(-9,8)</li>
<li>线性表运算：<br>
先创建一个<strong>新数组C</strong>，分别遍历比较A、B里面的项：</li>
</ol>
<ul>
<li>指数相同，系数相加，其和不为零，则加到C中</li>
<li>指数不同，将指数较小的复制到C中<br>
按照此方法：C=((7,0),(11,1),（22，7），(5,17))<br>
那么，新数组的大小应该定义成多大呢？显然并不好操作。我们可以用更合适的链式存储结构来存储A+B：<br>
<img src="https://i.loli.net/2021/08/18/sY6aQmN9dKOMctj.jpg" alt="QQ图片20210818161509.jpg" loading="lazy"><br>
还是分别遍历A，B：<br>
<img src="https://i.loli.net/2021/08/18/RoWATOBsMiK6bd2.jpg" alt="QQ图片20210818161516.jpg" loading="lazy"></li>
</ul>
<h3 id="12-线性表的类型定义">1.2 线性表的类型定义</h3>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2021/08/18/kYDE5moWxKFsqrT.jpg" alt="51501D751C327E771B77507110C7E795.png" loading="lazy"></figure>
<h4 id="1基本操作">（1）基本操作</h4>
<p><strong>InitList（&amp;L）</strong>：初始化，构造一个空的线性表L<br>
<strong>DesyroyList（&amp;L）</strong>：销毁已存在的线性表L<br>
<strong>ClearList</strong>：清空重置已存在的线性表L<br>
<strong>ListEmpty（L）</strong>：判断线性表是否为空，返回True或False<br>
<strong>ListLength（L）</strong>：计算线性表的元素个数<br>
<strong>GetElem（L，i，&amp;e）</strong>：若1&lt;=i&lt;=ListLength(L),用e返回第i个元素<br>
<strong>LocateElem（L，e，compare（））</strong>：compare（）为数据元素判定函数，返回第一个与e满足compare（）的数据元素<br>
<strong>PriorElem（L，cur_e,&amp;pre_e）</strong>:c当ur_e不是第一个元素时，用pre_e返回cur_e的前驱。<br>
<strong>NextElem（L，cur_e,&amp;next_e）</strong>:c当ur_e不是最后一个元素时，用next_e返回cur_e的后继。<br>
<strong>GetElem（&amp;L，i，e）</strong>：若1&lt;=i&lt;=ListLength(L)+1（最后一个元素的后面）,在第i个位置插入新的元素e，L的长度加1。<br>
<strong>ListDelete（&amp;L，i,&amp;e）</strong>:若1&lt;=i&lt;=ListLength(L),删除第i个元素，并用e返回其值，L长度减1.<br>
<strong>ListTraverse（&amp;L，visited（））</strong>：遍历</p>
<h3 id="13-线性表的顺序表示和实现">1.3 线性表的顺序表示和实现</h3>
<p>顺序表示又叫顺序存储（顺序映像）；<br>
特点：地址连续、依次存放、随机存取、类型相同。<br>
优点：存储密度大，随机存取任意元素<br>
缺点：插入删除操作时，需要移动大量元素；浪费存储空间；静态存储，元素个数不可自有扩充。<br>
定义：把<strong>逻辑上相邻</strong>的数据元素存储在<strong>物理上也相邻</strong>的存储单元中的存储结构，它占用了一片<strong>连续</strong>的储存空间。<br>
故，可以计算出某个元素的位置。<br>
公式：LOC（a_n）=LOC（a_m)+(n-m)*i<br>
其中，已知第m个元素的位置和每个元素占用i个存储单元，求第n个元素的位置（n&gt;m）。<br>
若已知第一个元素，就变成了：LOC（a_n）=LOC（a1)+(n-1)*i<br>
<strong>根据顺序表特点可用一维数组来表示</strong>：<br>
线性表长可变--&gt;用一变量表示顺序表的长度属性<br>
<img src="https://i.loli.net/2021/08/20/zevLgQMlWndxKbu.jpg" alt="15504A85E562E71A517B8DDB3C1819A8.png" loading="lazy"><br>
<strong>注意</strong>：线性表顺序存储时的逻辑结构下标是从1开始，存储结构是从0开始的（因为存储在数组），因此，逻辑位序比物理位序多1。</p>
<h3 id="14-顺序表基本操作的实现">1.4 顺序表基本操作的实现</h3>
<h4 id="1初始化">（1）初始化</h4>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2021/08/23/2pHcGqQEoT1VzNm.jpg" alt="B032BE39994070DAD76AAB273D0F32B3.png" loading="lazy"></figure>
<h4 id="2-销毁与清空线性表">(2) 销毁与清空线性表</h4>
<figure data-type="image" tabindex="3"><img src="https://i.loli.net/2021/08/23/IPnYVRuqL3FodwB.jpg" alt="E9F6B66E6A21D1F554A64D3CAD05A997.png" loading="lazy"></figure>
<h4 id="3线性表长度">（3）线性表长度</h4>
<figure data-type="image" tabindex="4"><img src="https://i.loli.net/2021/08/23/ybMWAsjSfuBColK.jpg" alt="F2221BCC38B2E813FFDE866D980E8BCD.png" loading="lazy"></figure>
<h4 id="4判断是否为空">（4）判断是否为空</h4>
<figure data-type="image" tabindex="5"><img src="https://i.loli.net/2021/08/23/o7THYBWxaiCLjtM.jpg" alt="9264E270166C603429F5DE0A690D4D0D.png" loading="lazy"></figure>
<h4 id="5顺序表取位置为i的值">（5）顺序表取位置为i的值</h4>
<figure data-type="image" tabindex="6"><img src="https://i.loli.net/2021/08/23/n8BJsPZrpDUT5l7.jpg" alt="539625CF6F0C9F967878FE4972309542.png" loading="lazy"></figure>
<h4 id="6按值查找">（6）按值查找</h4>
<p>在线性表中查找与指定值e相同的是数据元素的位置，从表的一端与表中数据逐个比较，找到返回位置序号，未找到返回0。<br>
<img src="https://i.loli.net/2021/08/23/4iKVcpSNjl5ZnR3.jpg" alt="1696E5387B2B57A8EA7691D49E067F93.png" loading="lazy"><br>
平均查找长度（ASL）：<br>
为确定记录在表中的位置，需要与给定值进行比较的关键字的个数的<strong>期望</strong>值叫做查找算法的平均查找长度。<br>
简单来说，就是所有情况下的查找次数之和除以元素个数就是ASL。<br>
ASL=∑PiCi (i=1,2,3,…,n),可以简单以数学上的期望来这么理解。其中：Pi 为查找表中第i个数据元素的概率，Ci为找到第i个数据元素时已经比较过的次数。</p>
<h4 id="7插入算法">（7）插入算法</h4>
<p>算法思想：</p>
<ul>
<li>判断插入位置i是否合法（1~n+1）</li>
<li>判断存储空间是否已满（i&lt;l.length）</li>
<li>将第n个位置至第i位的元素依次<strong>往后</strong>移动一个位置，空出第i个位置。</li>
<li>将要插入的新元素e放入第i个位置</li>
<li>表厂+1<br>
插入情况：<br>
①插入位置在最后<br>
②插入位置在中间<br>
③插入位置在最前面<br>
算法实现：<br>
<img src="https://i.loli.net/2021/08/23/V9iGyBawHzlxdE3.jpg" alt="3226C2AA9CD77FC7262FD53B9A8E0F54.png" loading="lazy"><br>
算法分析：ASL=(n+...+1+0)/n+1=n/2<br>
时间复杂度位O(n)</li>
</ul>
<h4 id="8-删除操作">(8) 删除操作</h4>
<p>删除情况：</p>
<ul>
<li>删除位置在最后</li>
<li>删除位置在中间</li>
<li>删除位置在最前<br>
算法思想：<br>
①判断删除位置是否合法（1~n）<br>
②将欲删除的元素保留在e中（可选）<br>
③将第i个元素至第n位的元素依次<strong>向前</strong>移动一个位置<br>
④表长-1，删除成功返回ok<br>
算法实现：<br>
<img src="https://i.loli.net/2021/08/23/6Pi3yNduenLzmfx.jpg" alt="2D3251D50C106D9C9738B289EE0EADD8.png" loading="lazy"><br>
算法分析：<br>
ASL：<br>
（n-1+n-2+n-3+...+0）/n=(n-1)/2<br>
时间复杂度：<br>
O（n）</li>
</ul>
<h3 id="15-线性表的链式表示和实现">1.5 线性表的链式表示和实现</h3>
<h4 id="1概念">（1）概念</h4>
<p>①结点<br>
数据元素的存储映象。由数据域和指针域两部分组成。</p>
<table>
<thead>
<tr>
<th style="text-align:center">数据域</th>
<th style="text-align:center">指针域</th>
</tr>
</thead>
<tbody></tbody>
</table>
<p>数据域是存储元素数值数据；指针域是存储直接后继结点的存储位置（地址）<br>
②链表<br>
n个结点由指针链组成一个链表。<br>
Head -&gt;| 数据a | 指针p1 | -&gt;| 数据b | 指针p2 | -&gt;| 数据c | NULL |<br>
③头指针<br>
链表中第一个结点（即第一个数据元素的存储映像）的存储位置。当存在头结点时头指针指向头结点的数据域，当不存在头结点时，头指针指向首结点。<br>
头指针具有标识作用，故常用头指针冠以链表的名字。<br>
无论链表是否为空，头指针均不为空。头指针是链表的必要元素。</p>
<h4 id="2-链表分类">(2) 链表分类</h4>
<p>①单链表（或线性链表）<br>
结点只有一个指针域的链表<br>
单链表是由表头唯一确定的，故单链表可以用头指针的名字来命名，若头指针名是L，则叫做链表L。<br>
②双链表<br>
每个结点有两个指针域的链表<br>
③循环链表<br>
首尾相接的链表<br>
<img src="https://i.loli.net/2021/09/12/V8basSfcK5tdlrM.jpg" alt="4F41B3648980B495A84822E18A505896.png" loading="lazy"><br>
<img src="https://i.loli.net/2021/09/12/Q1xkbsMj9OCFPKt.jpg" alt="QQ图片20210818161509.jpg" loading="lazy"><br>
补充：</p>
<ol>
<li>怎么表示空链表？<br>
无头结点时，头指针为空表示空表<br>
有头结点时，当头结点的指针域为空表示空表</li>
<li>设置头结点有什么好处？</li>
</ol>
<ul>
<li>便于首元节点的处理<br>
首元结点的地址保存在头结点的指针域中，所以在链表的第一个位置上的操作和其他位置一致，无需进行特殊处理。</li>
<li>便于空表和非空表的统一处理<br>
无论链表是否为空，头指针都是指向头结点得非空指针，因此空表和非空表的处理也就统一了。</li>
</ul>
<ol start="3">
<li>头节点的数据域存放着什么？<br>
头结点的数据域可以为空，也可以<strong>存放线性表长度</strong>、<strong>监哨所</strong>等附加信息，但<strong>此结点不能计入链表长度值</strong>。</li>
</ol>
<h4 id="3链表特点">（3）链表特点</h4>
<ol>
<li>结点在存储器中的位置是任意的，即逻辑上相邻的数据元素在物理上不一定相邻。</li>
<li>只能通过头指针访问链表，并通过每个结点的指针域<strong>依次向后顺序扫描</strong>其余结点。<br>
顺序表 -&gt; 随机存取 eg:访问第i个元素，a[i-1]；<br>
链表 -&gt; <strong>顺序存取</strong> eg:访问第i个元素，要从1，2，3，...i依次访问到i。</li>
</ol>
<h4 id="4单链表">（4）单链表</h4>
<p><strong>定义</strong>：<br>
链表有单链表、双链表以及循环链表。其中，重点介绍单链表。<br>
单链表是由表头唯一确定的，故单链表可以用头指针的名字来命名，若头指针名是L，则叫做链表L。<br>
<strong>存储结构</strong>：</p>
<table>
<thead>
<tr>
<th style="text-align:center">数据域</th>
<th style="text-align:center">指针域</th>
</tr>
</thead>
<tbody></tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">data</th>
<th style="text-align:center">next</th>
</tr>
</thead>
<tbody></tbody>
</table>
<p><img src="https://i.loli.net/2021/09/12/z7xVmdEtGskAoDF.jpg" alt="0EC62DFC1C1CB50E7D92BA924129380A.png" loading="lazy"><br>
定义链表L：LinkList L；<br>
定义结点指针p: LNode *P;</p>
<hr>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[爬虫案列]]></title>
        <id>https://mucixia.github.io/post/pa-chong-an-lie/</id>
        <link href="https://mucixia.github.io/post/pa-chong-an-lie/">
        </link>
        <updated>2021-08-09T07:57:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="写在前面">写在前面：</h3>
<p><a href="https://zhuanlan.zhihu.com/p/391928824">爬虫基础</a><br>
<a href="https://zhuanlan.zhihu.com/p/386867829">python基础</a><br>
<a href="https://zhuanlan.zhihu.com/p/394388182/edit">爬虫案例</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Road of Python]]></title>
        <id>https://mucixia.github.io/post/the-road-of-python/</id>
        <link href="https://mucixia.github.io/post/the-road-of-python/">
        </link>
        <updated>2021-08-08T08:27:29.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/386867829">我的python 之旅 记录与心得 - 流年的文章 - 知乎</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[简单的记录]]></title>
        <id>https://mucixia.github.io/post/jian-dan-de-ji-lu/</id>
        <link href="https://mucixia.github.io/post/jian-dan-de-ji-lu/">
        </link>
        <updated>2020-01-15T05:40:06.000Z</updated>
        <summary type="html"><![CDATA[<h4 id="写在前面周而复始-生而不息">写在前面：周而复始 生而不息</h4>
]]></summary>
        <content type="html"><![CDATA[<h4 id="写在前面周而复始-生而不息">写在前面：周而复始 生而不息</h4>
<!-- more -->
<p><strong>《在山上的船》</strong></p>
<p>一只船孤独地泊在湖上<br>
既没有向往远方<br>
亦无怀恋过往<br>
只在原地静默<br>
头顶迷离的山雾<br>
底下是静静的群山<br>
船在群山之下<br>
却又停在了群山之上<br>
它去到了永不会去的地方<br>
<img src="https://mucixia.github.io/post-images/1628926441921.jpg" alt="" loading="lazy"></p>
<p><strong>《十年后》</strong></p>
<p>十年后，二十年后，或许是论尽半生<br>
于 半生的尽头<br>
回望 记不起究竟多少年前<br>
留下的痕迹<br>
当时那一封 心书<br>
已蒙上 光留下的灰尘<br>
大概早已被当事人遗忘<br>
只有纸墨勤勤恳恳还记着</p>
<p>那些尘埃<br>
仅此证明 时间走过<br>
还有<br>
这个世界<br>
他也来过<br>
2019-11-27<br>
<img src="https://mucixia.github.io/post-images/1628928100550.jpg" alt="" loading="lazy"></p>
<p><strong>《历程》</strong></p>
<p>任何事物大概都会<br>
萌发、生长、繁盛<br>
消褪、最终湮灭吧<br>
这是抵不过的自然规律<br>
消亡后的重生<br>
隐匿后的沉寂<br>
萧败后的接续<br>
亦是无声后的沉默<br>
亦或是沉寂后的再次归来<br>
<img src="https://i.loli.net/2021/08/14/yLGkarQf5RW4SZl.jpg" alt="pexels-pixabay-414144.jpg" loading="lazy"></p>
<p><strong>《雪》</strong></p>
<p>揉碎的云<br>
选择在夜里降临世间<br>
带来了纯白<br>
带去了污浊<br>
当然，这只是一个常见的形容<br>
<img src="https://i.loli.net/2021/08/14/LGd27qZ1kwMpgSN.jpg" alt="pexels-s-migaj-1081111.jpg" loading="lazy"></p>
<p><strong>《时间与星星》</strong></p>
<p>我们数着时间<br>
时间也在数着我们<br>
我们数着星星<br>
星星也在望着我们<br>
<img src="https://i.loli.net/2021/08/14/iqf35WtSbav1Y9e.jpg" alt="pexels-rafael-cerqueira-4737484 _1_.jpg" loading="lazy"></p>
<p><strong>《适应》</strong></p>
<p>part01<br>
一个习惯和依赖黑暗的人<br>
感恩黑暗带给他的无尽和深邃<br>
哪怕见到一瞬的太阳<br>
也会憎恶万物渴望的光明<br>
part02<br>
一个习惯和依赖黑暗的人<br>
感恩黑暗带给他的无尽和深邃<br>
哪怕见到一瞬的光明后而<br>
转向长久的黑暗<br>
也可能会狂热于一丝的光亮而反过来<br>
憎恶给他一辈子生存环境的黑暗<br>
<img src="https://i.loli.net/2021/08/14/gHVophvJiNMSnO1.jpg" alt="pexels-pedro-figueras-681467.jpg" loading="lazy"></p>
<p><strong>《无题》</strong></p>
<p>不论心憾<br>
存在即是美好<br>
不论完美<br>
合理即使唯一<br>
<img src="https://i.loli.net/2021/08/14/9J3cOdvZsj5N4Lq.jpg" alt="pexels-adrien-olichon-2736135.jpg" loading="lazy"></p>
<p><strong>《少年 壮年 老年》</strong></p>
<p>少年轻狂<br>
企望柏拉图式的理想生活<br>
壮年迷茫<br>
奢求桃花源般的容身圣境<br>
老年暗伤<br>
回忆草蛇灰线似可怜时光<br>
<img src="https://i.loli.net/2021/08/14/VRpNvMO38ysq7E1.jpg" alt="pexels-krunal-parmar-965663.jpg" loading="lazy"></p>
<p><strong>《人生的一种》</strong><br>
生命中平凡<br>
平凡中卑微<br>
卑微后死去...<br>
周而复始<br>
生而不息<br>
<img src="https://i.loli.net/2021/08/14/MbcRIPYkWgToZCJ.jpg" alt="pexels-cats-coming-707582.jpg" loading="lazy"></p>
<p><strong>《归向》</strong><br>
在高处 凝望世界流动<br>
为填满每一个虚弱地方<br>
行人揣着欲望涌进街巷<br>
人车停在线前渴望远方<br>
可他们 终会重聚于某点<br>
周而往复 往复不息<br>
<img src="https://i.loli.net/2021/08/17/iPOWUb4Rlu3dIgV.jpg" alt="pexels-paweł-l-1309687.jpg" loading="lazy"></p>
<p><strong>《捉迷藏》</strong></p>
<p>趁着落霞的掩护<br>
夕阳躲进山中<br>
跟月亮捉着迷藏<br>
朝着东方<br>
赶了一夜<br>
在另一边的山头<br>
悄悄地探出头看月亮走了没<br>
于是有了人们口中的朝阳<br>
<img src="https://i.loli.net/2021/08/19/XbcS3ZrwGN1MkfC.jpg" alt="pexels-pixabay-462023.jpg" loading="lazy"><br>
<img src="https://i.loli.net/2021/08/19/UqDVgdZE9kBcPXn.jpg" alt="pexels-tomáš-malík-3367619.jpg" loading="lazy"></p>
<p><strong>《车里车外》</strong><br>
虹光和雨滴结满了车窗<br>
有人趁着雾气<br>
写上某某名字<br>
像是在宣告某种存在<br>
而我在雾上<br>
划上一个圈<br>
行人和车子<br>
都住进这个由小水滴围成的圈里<br>
数不清的雨滴<br>
对车里的人是整个斑斓世界<br>
对车外的人仅仅是一颗水滴<br>
数不清的名字<br>
对车里的人是他们自己存在的的存在<br>
对车外的人或是雨滴落后留下的轨迹<br>
水滴、乘客、名字与行人<br>
因为一场雨短暂聚在了一起<br>
<img src="https://i.loli.net/2021/08/25/AICKVOehuv41cPJ.jpg" alt="pexels-kaique-rocha-125510.jpg" loading="lazy"></p>
]]></content>
    </entry>
</feed>